resource_description:
  term: Resource description
  def: >
        The resource description describes the information provided by the resource. The description is brief (1-3 sentences) and usually starts with a verb. Resources themselves can have a number of endpoints to access the resource, and multiple methods for each endpoint. Thus, on the same page, you usually have a general resource described with a number of endpoints for accessing the resource. The endpoints are also briefly described.

resource_endpoints_and_methods:
  term: Endpoints
  def: >
        The endpoints indicate how you access the resource, and the method used with the endpoint indicates the allowed interactions (such as GET, POST, or DELETE) with the resource. The endpoint shows the end path of a resource URL only, not the base path common to all endpoints. The same resource usually has a variety of related endpoints, each with different paths and methods but returning variant information about the same resource.

parameters:
  term: Parameters
  def: >
        Parameters are options you can pass with the endpoint (such as specifying the response format or the amount returned) to influence the response. There are four types of parameters: header parameters, path parameters, query string parameters, and request body parameters.

request_example:
  term: Request example
  def: >
        The request example includes a sample request using the endpoint, showing some parameters configured. The request example usually can't show all possible parameter configurations, but it should be as rich as possible with parameters. Sample requests sometimes include code snippets that show the same request in a variety of languages (besides curl). Requests shown in other programming languages are optional and not always included in the reference topics, but when available, users welcome them.

response_example_and_schema:
  term: Response example and schema
  def: >
        The response example shows a sample response from the request example. The response example is not comprehensive of all parameter configurations or operations, but it should correspond with the parameters passed in the request example. The response lets developers know if the resource contains the information they want, the format, and how that information is structured and labeled. The response schema describes the response in a more comprehensive, general way, listing each property returned, a description of the property, the data format of the values, the structure, and other details.
